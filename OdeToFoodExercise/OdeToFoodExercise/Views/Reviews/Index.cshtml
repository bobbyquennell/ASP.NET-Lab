@model IEnumerable<OdeToFoodExercise.Models.RestaurantReview>

@{
    ViewBag.Title = "Index";
}

<h2>The Latest Reviews</h2>
we are showing the latest @Model.Count() reviews
@VirtualPath

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Country)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Rating)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @*@Html.DisplayFor(modelItem => item.City)*@
            @Html.Raw(item.City) @*This code is used to show how the cross-site scripting attack affects your site*@
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Country)
        </td>
        <td>
           @* @Html.DisplayFor(modelItem => item.Rating)*@
            R@(item.Rating) @*using a expilict csharp code expression--surrounding your csharp code with parenthesis to avoid treating your csharp code as an email address*@
            @@OdeToCode  @*using double at-sign to avoid treating the @OdeToCode as Csharp code falsely, it's a twitter handle*@
        </td>
        <td>S
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>
